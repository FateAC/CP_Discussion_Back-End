# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @auth on FIELD_DEFINITION
directive @admin on FIELD_DEFINITION

scalar Time
scalar Void
scalar Upload

type Member {
  _id: ID!
  email: String!
  password: String!
  isAdmin: Boolean!
  username: String!
  nickname: String!
  avatarPath: String!
  courses: [Course!]!
}

type Auth {
  token: String!
  state: Boolean!
}

input NewMember {
  email: String!
  password: String!
  isAdmin: Boolean!
  courses: [NewCourse!]!
}

input Login {
  email: String!
  password: String!
}

type Course {
  name: String!
}

input NewCourse {
  name: String!
}

type Comment {
  commenter: ID!
  content: String!
  mainLevel: Int!
  subLevel: Int!
  timestamp: Time!
  deleted: Boolean!
}

input NewComment {
  content: String!
  mainLevel: Int!
  subLevel: Int!
}

type Post {
  _id: ID!
  poster: String!
  title: String!
  year: Int!
  semester: Int!
  tags: [String!]!
  mdPath: String!
  createTime: Time!
  lastModifyTime: Time!
  comments: [Comment!]!
}

input NewPost {
  poster: String!
  title: String!
  year: Int!
  semester: Int!
  tags: [String!]!
  mdFile: Upload!
}

input NewPWD {
  id: String!
  password: String!
}

input SendResetPassword {
  email: String!
}

type Mutation {
  createMember(input: NewMember!): Member! @admin
  removeMember(id: String!): Member! @admin
  loginCheck(input: Login!): Auth!
  updateMemberCourses(id: String!, add: [NewCourse!]!, remove: [NewCourse!]!): [Course!]! @admin
  updateMemberAvatar(avatar: Upload!): Boolean! @auth
  removeMemberAvatar(id: String!): Boolean! @auth
  updateMemberNickname(nickname: String!): Boolean! @auth
  addPost(input: NewPost!): Post!
  removePost(id: String!): Post!
  updatePostFile(id: String!, file: Upload!): Boolean! @admin
  addPostComment(id: String!, newComment: NewComment!): Boolean! @auth
  deletePostComment(id: String!, mainLevel: Int!, subLevel: Int!): Boolean! @auth
  resetPWD(password: String!): Boolean! @auth
  sendResetPWD(email: String!): Boolean!
  updateMemberIsAdmin(id: String!): Boolean! @admin
}

type Query {
  selfInfo: Member! @auth
  member(_id: String!): Member!
  members: [Member!]!
  isAdmin: Boolean! @auth
  post(id: String!): Post!
  posts: [Post!]!
  getPostsByTags(year: Int!, semester: Int!, tags: [String!]!): [Post!]! @auth
  courses: [Course!]! @admin
}
